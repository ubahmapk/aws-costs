[tool.poetry]
name = "aws-costs"
version = "0.3.6"
description = "View AWS Cost and Usage report on a per-month basis"
authors = ["Jon Mark Allen <ubahmapk@gmail.com>"]
readme = "README.md"
packages = [{ include = "aws_costs" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: AWS CDK",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Topic :: Utilities",
]

[tool.poetry.dependencies]
python = ">=3.10"
arrow = ">=1.2.3"
babel = ">=2.12.1"
boto3 = "^1.28.51"
click = ">=8.1.7"
pydantic-settings = ">=2.2.1"
loguru = ">=0.7.2"

[tool.poetry.scripts]
aws-costs = "aws_costs.costs:cli"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
pattern = "^v(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?"
format-jinja = """
    {%- if distance == 0 -%}
        {{- base -}}
    {%- else -%}
        {{- base }}.dev{{ distance }}+g{{commit}}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
folders = [{ path = "aws_costs/*.py" }]

[tool.poetry-dynamic-versioning.files."aws_costs/__version__.py"]
persistent-substitution = true

[tool.poetry-dynamic-versioning.files."pyproject.toml"]
persistent-substitution = true

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.group.dev.dependencies]
ipython = "^8.15.0"
black = "^24.3"
mypy = "^1.9.0"
vermin = "^1.6.0"
ruff = "^0.3.5"
isort = "^5.13.2"
pre-commit = "^4.0.1"
bandit = "^1.7.10"

[tool.bandit]
exclude_dirs = ["aws_costs/tests"]
#tests = ["B201", "B301"]
#skips = ["B311"]

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | __version__.py
)/
'''

[tool.isort]
profile = "black"
line_length = 120

[tool.ruff]
line-length = 120
target-version = 'py310'
lint.select = [
    "E",   # Pycodestyle (Python Enhancement Proposals)
    "F",   # Pyflakes
    "W",   # Pywicket
    "B",   # Becker/Python
    "C4",  # McGrath/Python-CodingStyle
    "I",   # Isort
    "N",   # Mccabe/Python-McCabe
    "PTH", # Pylint -- Python Threading Hooks
    "Q",   # Pycodestyle -- Quality (PEP 8 -- Naming)
    "RUF", # Ruff-specific rules
    "SIM", # Simon/Python-Simplicity
    "UP",  # PyUP -- Unused Parameter
    "YTT", # Yttri/Python-Yoda
]
